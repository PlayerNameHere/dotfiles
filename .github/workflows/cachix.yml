name: Cachix

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      deploy: # When enabled, only the NixOS configuration is built (if needed)
        description: "Deploy the NixOS configuration"
        required: true
        type: boolean
        default: false

run-name: ${{ inputs.deploy && 'Deploy NixOS configuration' || 'Build flake outputs' }}

# Builds and deployments are in separate concurrency groups.
# Builds can cancel other in-progress builds on the same ref.
# Deployments will not cancel other in-progress deployments (but will cancel existing pending deployments),
# no matter what ref.
concurrency:
  group: ${{ github.workflow }}-${{ inputs.deploy && 'deploy' || 'build' }}${{ inputs.deploy && '' || format('-{0}', github.ref) }}
  cancel-in-progress: ${{ !inputs.deploy }}

env:
  artifact-name: deploy-spec-${{ github.sha }}
  nix-install-url: https://releases.nixos.org/nix/nix-2.13.3/install

jobs:
  check-flake:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.1.0
      - uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
          install_url: ${{ env.nix-install-url }}
      - name: Check flake
        run: nix flake check --keep-going
  generate-flake-outputs-matrix:
    runs-on: ubuntu-22.04
    needs: check-flake
    outputs:
      flake-outputs-matrix: ${{ steps.flake-outputs-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3.1.0
      - uses: cachix/install-nix-action@v19
        with:
          install_url: ${{ env.nix-install-url }}
      - id: flake-outputs-matrix
        name: Generate flake outputs matrix
        run: |
          # Outputs an array of flake outputs
          filter='[ paths | select((.[0] == "packages" or .[0] == "devShells") and length == 3) | join(".") ]'
          matrix=$(nix flake show --json | jq "$filter")
          printf '%s' "matrix=$matrix" >> "$GITHUB_OUTPUT"
  build-others:
    runs-on: ubuntu-22.04
    needs: [check-flake, generate-flake-outputs-matrix]
    if: ${{ needs.generate-flake-outputs-matrix.outputs.flake-outputs-matrix != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        flake-output: ${{ fromJson(needs.generate-flake-outputs-matrix.outputs.flake-outputs-matrix) }}
    steps:
      - id: download-spec
        uses: dawidd6/action-download-artifact@v2
        with:
          name: ${{ env.artifact-name }}
          workflow_conclusion: ""
          commit: ${{ github.sha }}
          search_artifacts: true
          if_no_artifact_found: ignore
      - if: ${{ !fromJson(steps.download-spec.outputs.found_artifact) }}
        uses: actions/checkout@v3
      - name: Build ${{ matrix.flake-output }}
        if: ${{ !fromJson(steps.download-spec.outputs.found_artifact) }}
        uses: ./.github/actions/build # from the checked out repo
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          flake-output: ${{ matrix.flake-output }}
          cachix-extra-pull-names: "devenv"
  build-nixos:
    runs-on: ubuntu-22.04
    needs: [check-flake, build-others]
    steps:
      - id: download-spec
        uses: dawidd6/action-download-artifact@v2
        with:
          name: ${{ env.artifact-name }}
          workflow_conclusion: ""
          commit: ${{ github.sha }}
          search_artifacts: true
          if_no_artifact_found: ignore
      - if: ${{ !fromJson(steps.download-spec.outputs.found_artifact) }} # https://github.com/actions/runner/issues/2238
        uses: actions/checkout@v3
      - name: Build deploy specification
        if: ${{ !fromJson(steps.download-spec.outputs.found_artifact) }}
        uses: ./.github/actions/build
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          flake-output: "cachix-deploy-spec"
          cachix-extra-pull-names: "nix-gaming, hyprland, nix-community"
      - if: ${{ !fromJson(steps.download-spec.outputs.found_artifact) }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact-name }}
          path: ./result
  deploy:
    runs-on: ubuntu-22.04
    needs: build-nixos
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.deploy }}
    steps:
      - uses: dawidd6/action-download-artifact@v2
        with:
          name: ${{ env.artifact-name }}
          workflow_conclusion: ""
          commit: ${{ github.sha }}
          search_artifacts: true
      - uses: cachix/install-nix-action@v19
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          install_url: ${{ env.nix-install-url }}
      - uses: cachix/cachix-action@v12
        with:
          name: playernamehere-nixos
          skipPush: true
      - name: Deploy
        env:
          CACHIX_ACTIVATE_TOKEN: "${{ secrets.CACHIX_ACTIVATE_TOKEN }}"
        run: |
          cachix deploy activate ./result
