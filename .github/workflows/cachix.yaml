---

name: Cachix

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      deployments:
        description: |
          JSON array of machines to deploy to.
          Each machine should be represented by its hostname.
          For example, `[ "alpha", "bravo" ]`.
        type: string

run-name: ${{ inputs.deployments != '' && 'Deploy NixOS configuration' || 'Build flake outputs' }}

# Builds and deployments are in separate concurrency groups.
# Builds can cancel other in-progress builds on the same ref.
# Deployments will not cancel other in-progress deployments (but will cancel existing pending deployments),
# no matter what ref.
concurrency:
  group: ${{ github.workflow }}-${{ inputs.deployments != '' && 'deploy' || 'build' }}${{ inputs.deployments != '' && '' || format('-{0}', github.ref) }}
  cancel-in-progress: ${{ inputs.deployments == '' }}

jobs:
  check-flake:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.1.0
      - uses: cachix/install-nix-action@v20
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Check flake
        run: nix flake check --keep-going --impure  # devenv requires impure
  generate-deploy-spec-matrix:
    runs-on: ubuntu-22.04
    needs: [check-flake]
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3.1.0
      - uses: cachix/install-nix-action@v20
      - id: generate
        name: Generate matrix of deploy specs
        env:
          DEPLOYMENTS: ${{ inputs.deployments }}
        run: |
          CI_ATTR="ci"
          CI_SUFFIX_REGEX="\"^$CI_ATTR.\""
          matrix=$(
            nix search ".#$CI_ATTR" --json |
              jq -c 'keys_unsorted | map({ "hostname": (. | sub('"$CI_SUFFIX_REGEX"'; "") | sub("-deploy-spec$"; "")), "flake-output": . })'
          )

          # Only build hosts to be deployed, if deploying
          if [ -n "$DEPLOYMENTS" ]; then
              matrix=$(jq -c --argjson deployments "$DEPLOYMENTS" 'map(select(.hostname | IN($deployments[])))' <<< "$matrix")
          fi

          printf '%s' "matrix=$matrix" >> "$GITHUB_OUTPUT"
  build-deploy-specs:
    runs-on: ubuntu-22.04
    needs: [generate-deploy-spec-matrix]
    strategy:
      fail-fast: false
      matrix:
        deploy-spec: ${{ fromJson(needs.generate-deploy-spec-matrix.outputs.matrix) }}
    steps:
      - id: check-deploy-spec-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          name: ${{ matrix.deploy-spec.hostname }}-deploy-spec-${{ github.sha }}
          workflow_conclusion: ""
          commit: ${{ github.sha }}
          search_artifacts: true
          if_no_artifact_found: ignore
      - name: Free up space
        # Unfortunately, all outputs are Unicode strings, so `fromJSON` must be used
        # whenever referencing this output to properly convert it to a boolean
        # https://github.com/actions/runner/issues/2238#issuecomment-1318973310
        # https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
        if: ${{ !fromJSON(steps.check-deploy-spec-artifact.outputs.found_artifact) }}
        run: |
          # Taken from https://github.com/easimon/maximize-build-space/blob/67afc2d7662c9d296547435e7605cc57a1df46f3/action.yml#L110
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
      - if: ${{ !fromJSON(steps.check-deploy-spec-artifact.outputs.found_artifact) }}
        uses: actions/checkout@v3
      - name: Build deploy specification
        if: ${{ !fromJSON(steps.check-deploy-spec-artifact.outputs.found_artifact) }}
        uses: ./.github/actions/build
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          derivation: ".#${{ matrix.deploy-spec.flake-output }}"
          cachix-extra-pull-names: "nix-gaming, hyprland, nix-community"
      - if: ${{ !fromJSON(steps.check-deploy-spec-artifact.outputs.found_artifact) }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.deploy-spec.hostname }}-deploy-spec-${{ github.sha }}
          path: ./result
  deploy:
    runs-on: ubuntu-22.04
    needs: [build-deploy-specs]
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.deployments != '' }}
    strategy:
      fail-fast: false
      matrix:
        hostname: ${{ fromJSON(inputs.deployments) }}
    steps:
      - id: download-deploy-spec-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          name: ${{ matrix.hostname }}-deploy-spec-${{ github.sha }}
          workflow_conclusion: ""
          commit: ${{ github.sha }}
          search_artifacts: true
      - uses: cachix/install-nix-action@v20
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: cachix/cachix-action@v12
        with:
          name: playernamehere-nixos
          skipPush: true
      - name: Deploy
        env:
          CACHIX_ACTIVATE_TOKEN: "${{ secrets.CACHIX_ACTIVATE_TOKEN }}"
        run: |
          cachix deploy activate ./result
